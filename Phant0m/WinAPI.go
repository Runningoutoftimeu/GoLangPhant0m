// Code generated by 'go generate'; DO NOT EDIT.

package Phant0m

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modAdvapi32 = windows.NewLazySystemDLL("Advapi32.dll")
	modKernel32 = windows.NewLazySystemDLL("Kernel32.dll")
	modOle32    = windows.NewLazySystemDLL("Ole32.dll")

	procGetSidSubAuthority      = modAdvapi32.NewProc("GetSidSubAuthority")
	procGetSidSubAuthorityCount = modAdvapi32.NewProc("GetSidSubAuthorityCount")
	procLookupPrivilegeValueW   = modAdvapi32.NewProc("LookupPrivilegeValueW")
	procPrivilegeCheck          = modAdvapi32.NewProc("PrivilegeCheck")
	procTerminateThread         = modKernel32.NewProc("TerminateThread")
	procCoCreateInstance        = modOle32.NewProc("CoCreateInstance")
	procCoInitializeSecurity    = modOle32.NewProc("CoInitializeSecurity")
)

func GetSidSubAuthority(p1 uintptr, p2 uintptr) (p3 uintptr, err error) {
	r0, _, e1 := syscall.Syscall(procGetSidSubAuthority.Addr(), 2, uintptr(p1), uintptr(p2), 0)
	p3 = uintptr(r0)
	if p3 == 0 {
		err = errnoErr(e1)
	}
	return
}

func GetSidSubAuthorityCount(p1 uintptr) (p2 uintptr, err error) {
	r0, _, e1 := syscall.Syscall(procGetSidSubAuthorityCount.Addr(), 1, uintptr(p1), 0, 0)
	p2 = uintptr(r0)
	if p2 == 0 {
		err = errnoErr(e1)
	}
	return
}

func LookupPrivilegeValueW(p1 uintptr, p2 uintptr, p3 uintptr) (err error) {
	r1, _, e1 := syscall.Syscall(procLookupPrivilegeValueW.Addr(), 3, uintptr(p1), uintptr(p2), uintptr(p3))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func PrivilegeCheck(p1 uintptr, p2 uintptr, p3 uintptr) (err error) {
	r1, _, e1 := syscall.Syscall(procPrivilegeCheck.Addr(), 3, uintptr(p1), uintptr(p2), uintptr(p3))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func TerminateThread(p1 uintptr, p2 uintptr) (err error) {
	r1, _, e1 := syscall.Syscall(procTerminateThread.Addr(), 2, uintptr(p1), uintptr(p2), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func CoCreateInstance(p1 uintptr, p2 uintptr, p3 uintptr, p4 uintptr, p5 uintptr) (err error) {
	r1, _, e1 := syscall.Syscall6(procCoCreateInstance.Addr(), 5, uintptr(p1), uintptr(p2), uintptr(p3), uintptr(p4), uintptr(p5), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func CoInitializeSecurity(p1 uintptr, p2 uintptr, p3 uintptr, p4 uintptr, p5 uintptr, p6 uintptr, p7 uintptr, p8 uintptr, p9 uintptr) (err error) {
	r1, _, e1 := syscall.Syscall9(procCoInitializeSecurity.Addr(), 9, uintptr(p1), uintptr(p2), uintptr(p3), uintptr(p4), uintptr(p5), uintptr(p6), uintptr(p7), uintptr(p8), uintptr(p9))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}
